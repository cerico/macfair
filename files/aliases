source ~/.zsh/tokens
export MARKPATH=$HOME/.marks
alias sedi='sed -i "" -e'
alias gr="git remote -v"


brewser=`stat -f "%Su" /usr/local/bin/brew`
alias brew='sudo -Hu '$brewser' brew'

help() {
  if [[ $# -eq 0 ]] ; then
    echo "run with command you're looking for help on"
    return
  fi
  node $HOME/.zsh/help.js $1
}

upsearch () {
  slashes=${PWD//[^\/]/}
  directory="$PWD"
  for (( n=${#slashes}; n>0; --n ))
  do
    test -e "$directory/$1" && echo "$directory" && return "hello"
    directory="$directory/.."
  done
}

back() {
  cd -
}

kawa() {
  cpr kawa
  ssh deploy
  cpr
}
newp() {
  if [[ $# -eq 0 ]] ; then
    echo 'run command with filename eg newp stadiums'
    return
  fi
  dir=`upsearch package.json`
  echo $dir
  if [[ -f $dir'/next.config.js' ]]
    then
    touch $dir/src/pages/$1.tsx
  elif  [ -f "astro.config.mjs" ]
    then
    touch $dir/src/pages/$1.astro
  else
    echo "idk"
  fi
}

install() {
  if [ -f "package-lock.json" ]
    then
    echo "installing via npm"
    npm i
  elif  [ -f "yarn.lock" ]
    then
    echo "installing via yarn"
    yarn
  else
    echo "no yarn or npm found"
  fi
}

cleanup(){
  find . -name "node_modules" -type d -prune -exec rm -rf '{}' +
}


discogs() {
  y=`echo $1 | awk -F'/' '{print $5}'`
  mkdir -p ~/Downloads/discogs/$y
  cd ~/Downloads/discogs/$y
  youtube-dl -xiwc $1
}
tokens() {
  echo mapbox
  echo openweathermap
}

sourcez () {
  source ~/.zshrc
}

ds () {
  du -sm * | sort -n
}

jump () { 
    cd -P "$MARKPATH/$1" 2>/dev/null || echo "No such mark: $1"
}

mark () { 
    mkdir -p "$MARKPATH"; ln -s "$(pwd)" "$MARKPATH/$1"
}

unmark () { 
    rm -if "$MARKPATH/$1"
}
marks () {
    ls -l "$MARKPATH" | tail -n +2 | sed 's/  / /g' | cut -d' ' -f9- | awk -F ' -> ' '{printf "%-10s -> %s\n", $1, $2}'
}

unmarkall () {
  for i in `marks  | awk -F" " '{print $2}'`
  do
  unmark $i
  done
}

_completemarks () {
  reply=($(ls $MARKPATH))
}

compctl -K _completemarks jump
compctl -K _completemarks unmark

mcd () {
  mkdir "$1"
  cd "$1"
}

start () {
  if [[ $# -eq 0 ]] ; then
    python3 -m http.server 9000
  else
    python3 -m http.server $1
  fi
}

alias branches="branchdate | head -18"
alias current_branch="git rev-parse --abbrev-ref HEAD"

repo () {
  git branch -m main
  gh repo create $(pwd | xargs basename) --private -y
}

gitinit () {
  git init
  echo node_modules >> .gitignore
  git add .
  git commit -m "init"
}

awks () {
  echo awk -F\' \' \'{print \$2}\'
}

alias vip="vi package.json"

logify () {
  cpr logging
  tail -f log/development.log
  cpr v
}

railsc () {
  cpr railsc
  rails c
  cpr v
}

railshist () {
  echo 'puts Readline::HISTORY.entries.each { |c| puts c }' | spring rails c | grep $1
}

cpr () { 
    echo -e "\033]50;SetProfile=$1\a" 
}

hist () {
  history | grep -i $1
}

wallpaper () {
  osascript -e 'set desktopImage to POSIX file "'/Library/Desktop\ Pictures/$1'"
  tell application "Finder"
    set desktop picture to desktopImage
  end tell'
}

green () {
  background="greentiled.png"
  wallpaper $background
}

blue () {
  background="bluetiled.png"
  wallpaper $background
}

oak () {
  background="oaktiled.png"
  wallpaper $background
}

geo () {
  curl -H 'User-Agent: keycdn-tools:https://picfair.com' 'https://tools.keycdn.com/geo.json?host='$1
}
city () {
  curl -H 'User-Agent: keycdn-tools:https://picfair.com' 'https://tools.keycdn.com/geo.json?host='$1 |jq -r '.data.geo.city'
}
region () {
  curl -H 'User-Agent: keycdn-tools:https://picfair.com' 'https://tools.keycdn.com/geo.json?host='$1 |jq -r '.data.geo.region_name'
}
isp () {
  curl -H 'User-Agent: keycdn-tools:https://picfair.com' 'https://tools.keycdn.com/geo.json?host='$1 |jq -r '.data.geo.isp'
}

sergey () {
  make -f ~/ansible/sergey/Makefile sergey -C ~/ansible/sergey
}

railsn () {
  make -f ~/Work/ansible/finisterre/Makefile rails -C ~/Work/ansible/finisterre LOCATION=`pwd`
}

# Avoid creating .DS_Store files on network or USB volumes
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true
# Don’t automatically rearrange Spaces based on most recent use
defaults write com.apple.dock mru-spaces -bool false

# Automatically hide and show the Dock
defaults write com.apple.dock autohide -bool true

# Enable “Do Not Track”
defaults write com.apple.Safari SendDoNotTrackHTTPHeader -bool true
