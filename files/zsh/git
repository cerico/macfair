repos () { # List all repos # ➜ repos public
  [[ -n $1 ]] && gh repo list --visibility $1 || gh repo list
}

issue () { # Create or view gh issue # ➜ issue "update nginx security policy"
  [[ ! $1 ]] && gh issue list && return
  [[ ! $1 = *[[:alpha:]]* ]] && gh issue view $1 && return
  [[ $2 = [[:alpha:]]* ]] && body=$2 || body=$1
  issue=`gh issue create -t $1 -b $body`
  for i in "$@" ; do if [[ "$i" == "-"* ]] && gh issue view "${issue##*/}" --web; done;
}

issues () { # List gh issues
  [[ $1 ]] && gh issue view $1 || gh issue list
}

prs () { # List open prs
  [[ $1 ]] && gh pr view $1 || gh pr list
}

_getpr () {
  pr=$(gh pr list | grep `git branch --show-current` | awk -F' ' '{print $1}')
}

closepr () {
  _getpr
  gh pr close $pr
}

viewpr () {
  [[ $1 ]] && pr=$1 || _getpr
  gh pr view $pr --web
}

cleanpr () {
  git rebase origin/main
  git reset origin/main
  git add .
  git commit
  git push -f
  _format_pr_title $(git rev-parse --abbrev-ref HEAD)
  gh pr create --title "$modified_title" --body ""
  echo "#wip: " >  ~/.config/git/commit-msg-template
}

wip () { # Create work-in-progress commit # ➜ wip "Initial cities now shading correctly"
	echo "#wip: $1" > ~/.config/git/commit-msg-template
	git commit
}

fix () { # Create semver fix commit # ➜ fix "Add missing data for Daegu"
	echo "#fix: $1" > ~/.config/git/commit-msg-template
	git commit
}

minor () { # Create semver minor commit # ➜ minor "Colorize and tab aliases output"
	echo "#feat: $1" > ~/.config/git/commit-msg-template
	git commit
}

major () { # Create semver major commit # ➜ major "Replace big breaking thing"
	echo "#feat!: $1" > ~/.config/git/commit-msg-template
	git commit
}

ghpr () { # Create and validate a PR
  if [[ $1 == 'patch' || $1 == 'fix' ]] ; then
    echo "#fix: "  > ~/.config/git/commit-msg-template
    cleanpr
  elif [[ $1 == 'minor' || $1 == 'feat' ]] ; then
    echo "#feat: "  > ~/.config/git/commit-msg-template
    cleanpr
  elif [[ $1 == 'major' || $1 == 'breaking' ]] ; then
    echo "#feat: "  > ~/.config/git/commit-msg-template
    cleanpr
  elif [[ `git cherry -v main | grep -v -e fix -e feat| wc -c` -eq 0 ]] ;  then
    git push
    _format_pr_title $(git rev-parse --abbrev-ref HEAD)
    gh pr create --title "$modified_title" --body ""
  else
    echo please squash the following commits before submitting PR
    git cherry -v main | grep -v -e fix -e feat
  fi
}

card () {
  [[ ! $1 ]] && return
  _format_pr_title $1
  echo $modified_title
  gh issue create -t $modified_title -b ""
  git checkout -b $1
}

_format_pr_title () {
  if [[ $1 =~ -[0-9] ]]
    then
    input_string=$1

    # Extract the prefix and suffix
    prefix=$(echo "$input_string" | awk 'match($0, /[0-9]+/){ print substr($0, 1, RSTART-1) substr($0, RSTART, RLENGTH) }')
    suffix=$(echo "$input_string" | awk 'match($0, /[0-9]+/){ print substr($0, RSTART+RLENGTH) }')

    # Replace hyphens with spaces in the suffix
    modified_suffix=$(echo "$suffix" | awk '{gsub(/-/, " "); print}')

    # Concatenate the prefix and modified suffix, separated with a colon
    modified_title="${prefix}:${modified_suffix}"
  else
    modified_title=$(echo "$1" | awk '{gsub(/-/, " "); print}')
  fi
}

_find_missing_newlines () {
  find . -type f -not -path "./.git*" -exec sh -c 'file -b "{}" | grep -q text' \; -exec sh -c '[ "$(tail -c 1 "{}" | od -An -a | tr -d "[:space:]")" != "nl" ]' \; -print
  find . -name '*.json' -exec sh -c '[ "$(tail -c 1 "{}" | od -An -a | tr -d "[:space:]")" != "nl" ]' \; -print
}

addnewlines () { # Add newlines where missing
  for i in $(_find_missing_newlines)
  do
    echo >> $i
  done
}
