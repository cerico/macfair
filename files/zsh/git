recent () {
  [[ $1 ]] && num=$1 || num=10
  [[ $2 ]] && f=$2 || f=".git"
  arrVar=()
  echo Finding $(ColorCyan $num) most recent directories containing $(ColorGreen $f)
  echo ---
  for i in `find . -name $f | grep -v node_modules | awk -F "/$f" '{print $1}'`
  do
  b=$(date -r $(ls -ta $i/* | head -n 1 | sed s/://g) "+%Y-%m-%d")
  arrVar+=($b" ${i#./}")
  done
  array=($arrVar); printf '%s\n' "${(o)array[@]}" | sort -r | head -n $num
  echo ""
  echo $(ColorCyan ${#arrVar[@]}) total
}

gits () {
  [[ $1 ]] && recent $1 .git || recent 10 .git
}

makefiles () {
  [[ $1 ]] && recent $1 Makefile || recent 10 Makefile
}

issue () {
  [[ ! $1 ]] && gh issue list && return
  [[ ! $1 = *[[:alpha:]]* ]] && gh issue view $1 && return
  [[ $2 = [[:alpha:]]* ]] && body=$2 || body=$1
  issue=`gh issue create -t $1 -b $body`
  for i in "$@" ; do if [[ "$i" == "-"* ]] && gh issue view "${issue##*/}" --web; done;
}

issues () {
  [[ $1 ]] && gh issue view $1 || gh issue list
}

prs () {
  [[ $1 ]] && gh pr view $1 || gh pr list
}

getpr () {
  pr=$(gh pr list | grep `git branch --show-current` | awk -F' ' '{print $1}')
}

closepr () {
  getpr
  gh pr close $pr
}

viewpr () {
  getpr
  gh pr view $pr --web
}

cleanpr () {
  git rebase origin/main
  git reset origin/main
  git add .
  git commit
  git push -f
  gh pr create --fill
  echo "#wip: " >  ~/.gitmessage
}

wip () {
	echo "#wip: $1" > ~/.gitmessage
	git commit
}

fix () {
	echo "#fix: $1" > ~/.gitmessage
	git commit
}

minor () {
	echo "#feat: $1" > ~/.gitmessage
	git commit
}

major () {
	echo "#feat!: $1" > ~/.gitmessage
	git commit
}

ghpr () {
  if [[ $1 == 'patch' || $1 == 'fix' ]] ; then
    echo "#fix: "  > ~/.gitmessage
    cleanpr
  elif [[ $1 == 'minor' || $1 == 'feat' ]] ; then
    echo "#feat: "  > ~/.gitmessage
    cleanpr
  elif [[ $1 == 'major' || $1 == 'breaking' ]] ; then
    echo "#feat: "  > ~/.gitmessage
    cleanpr
  elif [[ `git cherry -v main | grep -v -e fix -e feat| wc -c` -eq 0 ]] ;  then
    git push
    gh pr create --fill
  else
    echo please squash the following commits before submitting PR
    git cherry -v main | grep -v -e fix -e feat
  fi
}

nonewlines () {
  find . -type f -not -path "./.git*" -exec sh -c 'file -b "{}" | grep -q text' \; -exec sh -c '[ "$(tail -c 1 "{}" | od -An -a | tr -d "[:space:]")" != "nl" ]' \; -print
  find . -name '*.json' -exec sh -c '[ "$(tail -c 1 "{}" | od -An -a | tr -d "[:space:]")" != "nl" ]' \; -print
}

addnewlines () {
  for i in `nonewlines`
  do
    echo >> $i
  done
}

repo () {
  git branch -m main
  gh repo create $(pwd | xargs basename) --private -y
}

gitinit () {
  git init
  echo node_modules >> .gitignore
  git add .
  git commit -m "init"
}
